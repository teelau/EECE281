// C8051F381_ADC_multiple_inputs.c:  Shows how to use the 10-bit ADC and the
// multiplexer.  This program measures the voltages applied to pins P2.0 to P2.3.
//
// (c) 2008-2014, Jesus Calvino-Fraga
//
// ~C51~ 

#include <stdio.h>
#include <stdlib.h>
#include <c8051f38x.h>

#define MHZ 1000000L
#define SYSCLK (48*MHZ)
#define BAUDRATE 115200L
#define iterations 40000
volatile int dist = ;
volatile float buffer = 0.4;
volatile float distance;
char _c51_external_startup (void)
{
	PCA0MD&=(~0x40) ;    // DISABLE WDT: clear Watchdog Enable bit
	// CLKSEL&=0b_1111_1000; // Not needed because CLKSEL==0 after reset
	#if (SYSCLK == (12*MHZ))
		//CLKSEL|=0b_0000_0000;  // SYSCLK derived from the Internal High-Frequency Oscillator / 4 
	#elif (SYSCLK == (24*MHZ))
		CLKSEL|=0b_0000_0010; // SYSCLK derived from the Internal High-Frequency Oscillator / 2.
	#elif (SYSCLK == (48*MHZ))
		CLKSEL|=0b_0000_0011; // SYSCLK derived from the Internal High-Frequency Oscillator / 1.
	#else
		#error SYSCLK must be either 12MHZ, 24MHZ, or 48MHZ
	#endif
	OSCICN |= 0x03; // Configure internal oscillator for its maximum frequency
	
	// Configure P2.0 to P2.3 as analog inputs
	P1MDIN &= 0b_0000_0000; // P2.0 to P2.3
	P1SKIP |= 0b_1111_1111; // Skip Crossbar decoding for these pins

	// Init ADC multiplexer to read the voltage between P2.0 and ground.
	// These values will be changed when measuring to get the voltages from
	// other pins.
	// IMPORTANT: check section 6.5 in datasheet.  The constants for
	// each pin are available in "c8051f38x.h" both for the 32 and 48
	// pin packages.
	AMX0P = LQFP32_MUX_P1_0; // Select positive input from P2.0
	AMX0N = LQFP32_MUX_GND;  // GND is negative input (Single-ended Mode)
	
	// Init ADC
	ADC0CF = 0xF8; // SAR clock = 31, Right-justified result
	ADC0CN = 0b_1000_0000; // AD0EN=1, AD0TM=0
  	REF0CN=0b_0000_1000; //Select VDD as the voltage reference for the converter
  	
	VDM0CN=0x80;       // enable VDD monitor
	RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
	P0MDOUT|=0x10;     // Enable Uart TX as push-pull output
	XBR0=0x01;         // Enable UART on P0.4(TX) and P0.5(RX)
	XBR1=0x40;         // Enable crossbar and weak pull-ups
	
	#if (SYSCLK/BAUDRATE/2L/256L < 1)
		TH1 = 0x10000-((SYSCLK/BAUDRATE)/2L);
		CKCON &= ~0x0B;                  // T1M = 1; SCA1:0 = xx
		CKCON |=  0x08;
	#elif (SYSCLK/BAUDRATE/2L/256L < 4)
		TH1 = 0x10000-(SYSCLK/BAUDRATE/2L/4L);
		CKCON &= ~0x0B; // T1M = 0; SCA1:0 = 01                  
		CKCON |=  0x01;
	#elif (SYSCLK/BAUDRATE/2L/256L < 12)
		TH1 = 0x10000-(SYSCLK/BAUDRATE/2L/12L);
		CKCON &= ~0x0B; // T1M = 0; SCA1:0 = 00
	#else
		TH1 = 0x10000-(SYSCLK/BAUDRATE/2/48);
		CKCON &= ~0x0B; // T1M = 0; SCA1:0 = 10
		CKCON |=  0x02;
	#endif
	P2MDOUT|=0b_0000_00000;	
	TL1 = TH1;     // Init timer 1
	TMOD &= 0x0f;  // TMOD: timer 1 in 8-bit autoreload
	TMOD |= 0x20;                       
	TR1 = 1;       // Start timer1
	SCON = 0x52;
	
	return 0;
}

// Uses Timer3 to delay <us> micro-seconds. 
void Timer3us(unsigned char us)
{
	unsigned char i;               // usec counter
	
	// The input for Timer 3 is selected as SYSCLK by setting T3ML (bit 6) of CKCON:
	CKCON|=0b_0100_0000;
	
	TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
	TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
	
	TMR3CN = 0x04;                 // Sart Timer3 and clear overflow flag
	for (i = 0; i < us; i++)       // Count <us> overflows
	{
		while (!(TMR3CN & 0x80));  // Wait for overflow
		TMR3CN &= ~(0x80);         // Clear overflow indicator
	}
	TMR3CN = 0 ;                   // Stop Timer3 and clear overflow flag
}

void waitms (unsigned int ms)
{
	unsigned int j;
	unsigned char k;
	for(j=0; j<ms; j++)
		for (k=0; k<4; k++) Timer3us(250);
}
void wait_bit_time(){
	float n=iterations;
	while (n>0){
	n--;
	}
	return;
}
void wait_one_and_half_bit_time(){
	float n=1.5*iterations;
	while (n>0){
		n--;
	}
	return;
}

float Get_ADC(int channel){
	float v;
	switch (channel){
				case 0:
					AMX0P=LQFP32_MUX_P1_0;
				break;
				case 1:
					AMX0P=LQFP32_MUX_P1_1;
				break;
				case 2:
					AMX0P=LQFP32_MUX_P1_2;
				break;
				case 3:
					AMX0P=LQFP32_MUX_P1_3;
				break;
				case 4:
					AMX0P=LQFP32_MUX_P1_4;
				break;
				case 5:
					AMX0P=LQFP32_MUX_P1_5;
				break;
				case 6:
					AMX0P=LQFP32_MUX_P1_6;
				break;
				case 7:
					AMX0P=LQFP32_MUX_P1_7;
				break;		
	}	
	AD0BUSY = 1;
	while (AD0BUSY); // Wait for conversion to complete
	v = ((ADC0L+(ADC0H*0x100))*3.325)/1023.0; // Read 0-1023 value in ADC0 and convert to volts
	return v;
	
}

int rx_byte (float min)
{
	int j, val;
	int v;
	//skip the start bit
	val = 0;
	Get_ADC(1);
	wait_one_and_half_bit_time();
	for (j=0; j<8; j++)
	{
	v = Get_ADC(1);
	val|=(v>min)?(0x01<<j):0x00; //if voltage is greater than "min" then the returned val gets a bit at the right position
	wait_bit_time();
	}
	//wait for stop bits
	wait_one_and_half_bit_time();
	return val;
}


#define VDD      3.325 // The measured value of VDD in volts


void main (void)
{

	int byte = 300;
	float v0 = 0;
	float v1 = 0;
	float v2 = 0;
	float v3 = 0;
	double vright = 0;
	double vleft = 0;
	int temp = 0;
	P2_0 = 1; //front LED
	P2_1 = 0; //back LED
	
	printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
	
	// Start the ADC in order to select the first channel.
	// Since we don't know how the input multiplexer was set up,
	// this initial conversion needs to be discarded.
	AD0BUSY=1;
	while (AD0BUSY); // Wait for conversion to complete

	while(1)
	{	
		v0 = Get_ADC(1);
		v1 = Get_ADC(2);
		v2 = Get_ADC(3);
		v3 = Get_ADC(0);
		if(dist == 2){
			vright = v1;
			vleft = v3;
			distance = 2.8;
		}
		else if(dist == 1){
			buffer = 0.5;
			vright = v0;
			vleft = v2;
			distance = 1.5;
		}
		else if(dist == 3){
			vright = v1;
			vleft = v3;
			distance = 2;
			buffer = .2;
			}
		else if(dist == 4){
			vright = v1;
			vleft = v3;
			distance = 1.2;
			buffer = 0.2;
			}
		else{
			vright = v1;
			vleft = v3;
			distance = 0.5;
			buffer = 0.3;
			}		
		printf("Vright = %5.3f ", vright);
		printf("Vleft = %5.3f", vleft);
		printf("distance = %d\r", dist);
	/*	if(vleft<0.15){
			P2_2 = 0;
			P2_3 = 0;
			P2_4 = 0;
			P2_5 = 0;
			byte = rx_byte(0.2);
			printf("\n byte = %d\n", byte);
		}*/
		if(vright+buffer > vleft-buffer && vright-buffer < vleft+buffer){
			//straight
			if(vright+buffer>distance && vright - buffer < distance){//stay
			P2_2 = 0;
			P2_3 = 0;
			P2_4 = 0;
			P2_5 = 0;
			}
			else if (vright-buffer > distance){//back
			P2_2 = 1;
			P2_3 = 0;
			P2_4 = 0;
			P2_5 = 1;		
			}
			else{//forward
			P2_2 = 0;
			P2_3 = 1;
			P2_4 = 1;
			P2_5 = 0;
			}
		}	
	else if(vright-buffer > vleft){
			P2_2 = 0;
			P2_3 = 0;
			P2_4 = 1;
			P2_5 = 0;
		}
		else{
			P2_2 = 0;
			P2_3 = 1;
			P2_4 = 0;
			P2_5 = 0;
		}
		
		
		if(byte == 0 || byte == 1 || byte == 129 || byte == 128){ // move farther p0
			if(dist != 5){
			dist++;
			}
			byte = 300;	
		}
		if(byte == 254 || byte == 255 || byte == 253 ){ //move closer p1
			if(dist != 1){
			dist--;
			}
			byte = 300;
			printf("move closer \n");	
	 	}  
		if(byte == 14 || byte == 15 || byte == 7){ //rotate 180 p2
			byte = 300;
			P2_2 = 0;
			P2_3 = 1;
			P2_4 = 0;
			P2_5 = 0;
			waitms(2500);	 	
			P2_2 = 0;
			P2_3 = 0;
			P2_4 = 0;
			P2_5 = 0;
			if (dist != 5){
				dist++;
			}
			printf("rotate 180 \n");	
	 	}
		if(byte == 238 || byte == 239 || byte == 119){ //front leds p3
			P2_0 = !P2_0;
			byte = 300;
			printf("ledfront \n");	 	
	 	}
		if(byte == 56 || byte == 57 || byte == 25){ //back leds p4
			P2_1 = !P2_1;
			byte = 300;
			printf("ledback \n");		 	
	 	}
		if(byte == 246 || byte == 243 || byte ==251){ //buzzer p5
			byte = 300;
			printf("buzz on \n");		 	
	 	}	
		if(byte == 124 || byte == 125 || byte == 61){ //p park p6
			byte = 300;
			P2_2 = 0;
			P2_3 = 1;
			P2_4 = 0;
			P2_5 = 0;
			waitms(1000);
			P2_2 = 1;
			P2_3 = 0;
			P2_4 = 0;
			P2_5 = 1;
			waitms(1500);
			P2_2 = 0;
			P2_3 = 0;
			P2_4 = 1;
			P2_5 = 0;
			waitms(1000);
			P2_2 = 0;
			P2_3 = 1;
			P2_4 = 1;
			P2_5 = 0;
			waitms(500);
			P2_2 = 0;
			P2_3 = 0;
			P2_4 = 0;
			P2_5 = 0;
			waitms(2000);
			printf("park \n");		 	
	 	}
	}	
}
